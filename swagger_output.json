{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "zuri portfolio authentication_service API",
    "description": "Documentation for zuri portfolio authentication_service API."
  },
  "host":"staging.zuri.team/api/auth",
  "servers": [
    {
      "url": "staging.zuri.team/api/auth",
      "description": "production server"
    },
    {
      "url": "auth.akuya.tech",
      "description": "development sever"
    },
    {
      "url": "localhost:3000/api/auth",
      "description": "local server"
    }
  ],
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication Endpoints"
    },
    {
      "name": "Google-Auth",
      "description": "google authentication endpoints"
    },
    {
      "name": "PASSWORD RESET AND EMAIL VERIFICATION",
      "description": "password reset and email verification Endpoints"
    },
    {
      "name": "2FA",
      "description": "two step verification Endpoints"
    },
    {
      "name": "Get-Authorization",
      "description": "Get authorization Endpoints"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "JWT": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "JWT",
      "in": "header"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Register User",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "john"
                },
                "lastName": {
                  "type": "string",
                  "example": "doe"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "myPassword2021"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created, User Created Successfully."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/verify/{token}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Handles the verification and confirmation of the authenticity of a user's email address.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/check-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "check email to vilidate, if it can be used to register or not.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/verify/resend": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Resends another verification token for user to complete email verification process.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Login User",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "PASSWORD RESET AND EMAIL VERIFICATION"
        ],
        "description": "Handles the process of user resetting password.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test-user@mail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      },
      "patch": {
        "tags": [
          "PASSWORD RESET AND EMAIL VERIFICATION"
        ],
        "description": "Handles the process of resetting a user's forgotten password.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "any"
                },
                "password": {
                  "type": "string",
                  "example": "any"
                }
              },
              "required": [
                "email",
                "token"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/reset-password/{token}": {
      "get": {
        "tags": [
          "PASSWORD RESET AND EMAIL VERIFICATION"
        ],
        "description": "Handles the process of resetting a user's forgotten password.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/2fa/enable": {
      "post": {
        "tags": [
          "2FA"
        ],
        "description": "Handles the process of enabling 2fa for a registered user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/2fa/send-code": {
      "post": {
        "tags": [
          "2FA"
        ],
        "description": "Handles the process of sending 2fa token to a registered email.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/api/auth/2fa/verify-code": {
      "post": {
        "tags": [
          "2FA"
        ],
        "description": "Handles the process of verifying the token sent to user's email against the token provided by user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                },
                "email": {
                  "type": "string",
                  "example": "test@gmail.com"
                }
              },
              "required": [
                "token",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "Google-Auth"
        ],
        "description": "Handles the process of signing up using google auth.",
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "401": {
            "description": "Unauthorized Request, The user is not authorized for this request."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/auth/google/redirect": {
      "get": {
        "tags": [
          "Google-Auth"
        ],
        "description": "Handle the process of creating a new user in the database using Google OAuth.",
        "requestBody": {
          "description": "User data for creating a new user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idToken": {
                    "type": "string",
                    "description": "Google ID token received during authentication"
                  },
                  "name": {
                    "type": "string",
                    "description": "User's name"
                  },
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "id": {
                    "type": "string",
                    "description": "user's id"
                  }
                },
                "required": [
                  "idToken",
                  "name",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, user created successfully."
          },
          "400": {
            "description": "Bad Request, invalid request or missing required fields."
          },
          "401": {
            "description": "Unauthorized, user is not authorized for this request."
          },
          "500": {
            "description": "Internal Server Error, error processing the request on the server."
          }
        }
      }
    },
    "/api/authorize/roles": {
      "get": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "Get authrorized roles for users",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success, user created successfully."
          }
        }
      }
    },
    "/api/authorize": {
      "post": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "Authorize user for a specific permission",
        "parameters": [
          {
            "in": "body",
            "name": "authorizationRequest",
            "description": "Authorization request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "required": true,
                  "description": "User authentication token",
                  "example": "your_jwt_token_here"
                },
                "permission": {
                  "type": "string",
                  "required": false,
                  "description": "Permission to check authorization for (optional)",
                  "example": "product.read"
                }
              }
            }
          }
        ],
        "responses": {
          "200 without permission": {
            "description": "User is authorized",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 200
                },
                "authorized": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User is authorized"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID",
                      "example": "78e82738-9996-40ce-b142-7fc90dfb536c"
                    }
                  }
                }
              }
            }
          },
          "200 with permission": {
            "description": "User is authorized",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 200
                },
                "authorized": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User is authorized for this permission"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID",
                      "example": "78e82738-9996-40ce-b142-7fc90dfb536c"
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": [
                          "product.create",
                          "order.create",
                          "shop.read"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Invalid permission"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 401
                },
                "authorized": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is not authorized for this permission"
                }
              }
            }
          },
          "401 not verified": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 401
                },
                "authorized": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "user is not verified"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorize/permissions": {
      "get": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "Get authorized permissions for a user",
        "responses": {
          "200": {
            "description": "Success, user created successfully."
          }
        }
      }
    },
    "/users/permission": {
      "post": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "Authorize user for a specific permission",
        "parameters": [
          {
            "in": "body",
            "name": "authorizationRequest",
            "description": "Authorization request",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "User id "
                },
                "permissionId": {
                  "type": "string",
                  "description": "Permission id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      },
      "delete": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "unauthorize user for a specific permission",
        "parameters": [
          {
            "in": "body",
            "name": "authorizationRequest",
            "description": "Authorization request",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "User id "
                },
                "permissionId": {
                  "type": "string",
                  "description": "Permission id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },   
     "/users/{id}/role": {
      "put": {
        "tags": [
          "Get Authorization"
        ],
        "summary": "Authorize user for a specific role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "authorizationRequest",
            "description": "Authorization request",
            "schema": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "string",
                  "description": "User role id"
                },
                "roleName": {
                  "type": "string",
                  "description": "User role name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },   
     "/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Authorize user for a specific permission",
        "parameters": [
          {
            "in": "header", 
            "name": "Authorization",
            "description": "JWT token for user authentication",
            "required": true,
            "type": "string", 
            "default": "Bearer your-jwt-token", 
            "format": "JWT" 
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Successfully processed request."
          },
          "400": {
            "description": "Bad Request, The user sent an invalid request."
          },
          "404": {
            "description": "Not Found, User Not Found."
          },
          "500": {
            "description": "Internal Server Error, Error processing request from the server."
          }
        }
      }
    },
    "/auth/change-email": {
      "patch": {
        "summary": "Change User's Email",
        "tags": [
          "Protected Auth"
        ],
        "parameters": [
          {
            "in": "header", 
            "name": "Authorization",
            "description": "JWT token for user authentication",
            "required": true,
            "type": "string", 
            "default": "Bearer your-jwt-token", 
            "format": "JWT" 
          },
          {
            "in": "body",
            "name": "changeEmailRequest",
            "description": "Request to change the user's email",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newEmail": {
                  "type": "string",
                  "description": "The new email address for the user."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email change request successful. JWT verification token sent to the user.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true
                },
                "message": {
                  "type": "string",
                  "description": "Success message."
                },
                "verificationToken": {
                  "type": "string",
                  "description": "JWT verification token sent to the user."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request parameters are invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": false
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                },
                "errorCode": {
                  "type": "string",
                  "description": "Error code for reference."
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found. The user was not found.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": false
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                },
                "errorCode": {
                  "type": "string",
                  "description": "Error code for reference."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing your request.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": false
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                },
                "errorCode": {
                  "type": "string",
                  "description": "Error code for reference."
                }
              }
            }
          }
        }
      }
    }
},
"definitions": {
  "users": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
      },
      "firstName": {
        "type": "string",
        "example": "John"
      },
      "lastName": {
        "type": "string",
        "example": "John"
      },
      "email": {
        "type": "string",
        "example": "test@gmail.com"
      },
      "username": {
        "type": "string",
        "example": "johndoe"
      },
      "password": {
        "type": "string",
        "example": "myPassword2021"
      }
    }
  }
}
}